generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id                     BigInt            @id @default(autoincrement())
  email                  String            @unique
  name                   String
  password               String
  bio                    String
  photo                  String?
  phone                  String?
  active                 Boolean           @default(false)
  verified               Boolean           @default(false)
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  role                   Role
  posts                  Post[]
  sources                ReputalbeSource[]
  jobs                   Job[]
  jobsApplied            Application[]
  comments               Comment[]
  friends                Friend[]          @relation("friends")
  usersFriends           Friend[]          @relation("usersFriends")
  sentFriendRequests     FriendRequest[]   @relation("requester")
  receivedFriendRequests FriendRequest[]   @relation("receiver")
  likedPosts             Like[]
}

model Friend {
  id           BigInt             @id @default(autoincrement())
  userId       BigInt
  User         User               @relation("friends", fields: [userId], references: [id])
  friendId     BigInt
  friend       User               @relation("usersFriends", fields: [friendId], references: [id])
  relationship RelationshipStatus @default(Friend)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  @@unique([userId, friendId])
}

model FriendRequest {
  id          BigInt        @id @default(autoincrement())
  requester   User          @relation("requester", fields: [requesterId], references: [id])
  receiver    User          @relation("receiver", fields: [receiverId], references: [id])
  requesterId BigInt
  receiverId  BigInt
  status      RequestStatus

  @@unique([requesterId, receiverId])
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum RelationshipStatus {
  Acquaintance
  Colleague
  Friend
  BestFriend
  FamilyFriend
  BusinessPartner
  LovedOne
}

model Job {
  id           BigInt        @id @default(autoincrement())
  title        String
  company      String
  location     String
  description  String
  workplace    WorkplaceType
  type         JobType
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  applications Application[]
  User         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       BigInt
}

model Application {
  id       BigInt  @id @default(autoincrement())
  job      Job     @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId    BigInt
  accepted Boolean @default(false)
  User     User    @relation(fields: [userId], references: [id])
  userId   BigInt
}

model Post {
  id        BigInt    @id @default(autoincrement())
  title     String
  body      String
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    BigInt
  comments  Comment[]
  likes     Like[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        BigInt   @id @default(autoincrement())
  body      String
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    BigInt
  User      User     @relation(fields: [userId], references: [id])
  userId    BigInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id      BigInt @id @default(autoincrement())
  likedBy User   @relation(fields: [userId], references: [id])
  userId  BigInt
  post    Post   @relation(fields: [postId], references: [id])
  postId  BigInt

  @@unique([userId, postId])
}

model ReputalbeSource {
  id     BigInt  @id @default(autoincrement())
  name   String
  url    String?
  User   User    @relation(fields: [userId], references: [id])
  userId BigInt
}

enum Role {
  USER
  COMPANY
  ADMIN
}

enum JobType {
  fullTime
  partTime
  contract
  temporary
  volunteer
  internship
  other
}

enum WorkplaceType {
  onSite
  hybrid
  remote
}
